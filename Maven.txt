Creating via command line
mvn archetype:generate -DgroupId=com.abhishek -DartifactId=hellomaven -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

	-   archetype here means maven goal, here maven goal is to generate a project
	-   Arguments passed with -D parameters to the archetype
	-   groupId is java package name for our project
	-   archetypeArtifactId defines what type of project we are creating
	-   Interactive mode is set to false, if no parameters are given then it goes to interactive mode where it dynamically asks for groupId archetype etc
	-   Pom stands for project object model

	-   To change the project source and target version
	-   <properties>
	        <maven.compiler.source>11</maven.compiler.source>
	        <maven.compiler.target>11</maven.compiler.target>
	    </properties>

	mvn install
		-   Compiling the project, running the tests and packaging

	java -cp ./target/nameOfJar com.packageName.MainClassName
		-   Running the project
        -   all packaging is done under the target folder
        -   also the packaging tag in pom.xml tell whether it will be jar or war

    Maven Plugin vs Maven Goals:
        -   Maven Plugin is a collection of one or more Maven Goals
        -   this the way to recognize it => pluginId:goalId
        -   Example
                -   archetype:generate
                    -   here archtype is the plugin and generate is the goal
                -   install:install
                    -   same with this one

    Maven Phases and Goals
    -   When you run the mvn install command then you have asked maven to execute lifecycle
        phase
    -   Maven has multiple lifecycle phases such as
        -   process-resources
        -   compile
        -   test
        -   package

    -   when any phase is run such as "package", then it will run all the previous
        phases as well

    -   each phase is related to either one or more plugin:goal
        -   process-resources   =>  resources:resources
        -   compile             =>  compiler:compiler
        -   test                =>  surefire:test
        -   package             =>  jar:jar

    -   Instead of using "mvn install", you can write "mvn surefire:test" and maven
        will execute all the prior phases with which this phase is associated

    Maven Coordinates
    -   Plugins such as jar and war will look at the Maven Coordinates of the pom.xml
    -   These coordinates are
        -   groupId
        -   artifactId
        -   version
        -   packaging
    -   These coordinates are internally represented as
        -   groupId:artifactId:pakaging:version
        -   And will decide where our project will be located in maven repository
        -   And will also decide the name of the final output (jar or war) file

    -   groupId
        -   refers to the name of the package
    -   artifactId
        -   subelement of groupId, used to name our project, will be used in jar or war file
    -   version
        -   When we are continusously developing the project, but haven't released it yet, then it will have
            -   hellomaven-1.0-SNAPSHOT.jar
            -   otherwise, when it is released it will have hellomaven-1.0.jar

    -   packaging
        -   It is basically used to decide what type of packaging of the project will be used jar or war or ear

    Maven Repositories
    -   When we run "mvn install" command, then it downloads a bunch of dependencies to run
        the project
    -   http://repo.maven.apache.org/maven2/ is the default maven repository url
    -   While packaging the project, maven will pull all the required dependencies from
        remote maven repository and will store them in local maven repository
    -   During next build it will reuse the same set of dependencies from the local maven
        repository
    -   Default local maven repository is in home directory "/home/{user}/.m2/repository"

    Customising Maven settings
    -   By default maven uses 1.5 as the java version
    -   We can see this in the effective pom(In Eclipse go to effective pom tab, in Intellij
        do double shift and search for effective pom)
    -   Every pom.xml file will derive some settings from the super pom i.e effective pom
    -   If we search for compiler plugin then it is using a very old version of plugin
    -   So, that's why it is showing 1.5 as the java version
    -   We can override this plugin in our pom.xml file
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    Some maven Commands
    -   mvn install, will compile package and run the tests
        -   if tests fail then there will be error shown
    -   mvn install -DskipTests, will do the above but won't run the tests
    -   mvn install -Dmaven.test.skip=true, will do the same thing as above

    Dependency Management
    -   Maven uses project coordinates such as groupId, artifactId, version to locate
        the set of dependencies in the maven repository
    -   It will download all the repositories in the local .m2/repository folder
    -   And it will add them to the classpath.
    -   It will also download all the transitive dependencies as well. For example
        -   if spring-context is added as dependency, then it will download spring-aop,
            spring-beans as well

    Note -  By default artifactId and version is used to name the jar or war file
            -   <artifactId>productwebArtifact</artifactId>
                <version>1.0-SNAPSHOT</version>
            -   Then the jar or war will be named as productwebArtifact-1.0-SNAPSHOT.jar

            But, If under build tag we have finalname tag present then that value will be used for
            naming the jar or the war file
            -   <build>
                    <finalName>productweb</finalName>
                </build>
            -   Then the jar or war will be named as productweb.jar

    Creating a MultiModule Project
    -   Create a Parent Pom for a multimodule project
        -   copy one of the pom.xml from your modules and place it inside the root of your modules
            -   Eg: -----------pom.xml(parent)
                        -------module1
                                ----pom.xml
                        -------module2
                                ----pom.xml

        -   packaging should be "pom" and not jar or war
            -   <artifactId>productparent</artifactId>
                <packaging>pom</packaging>
                <version>1.0-SNAPSHOT</version>
        -   add all the multimodule dependencies inside your <module> tag
            -   <modules>
                    <module>module1</module>
                    <module>module2</module>
                </modules>

    -   Set Dependency of parent in child modules
        -   Create a parent tag in each of the modules and add parent artifactId, groupId and version
        -   <parent>
                <groupId>com.company.product</groupId>
                <artifactId>productparent</artifactId>
                <version>1.0</version>
            </parent>
    -   After that go to parent pom folder and write "mvn clean install"
    -   When running the above command, maven puts all the modules in the "Reactor"
    -   This reactor decides the build order of the modules i.e if one module is dependent on
        another then that module needs to build first
    -   After that maven builds the jar and places it inside the local .m2 repository

    InterModule dependency
    -   To add one module dependent on another add the following as dependency in the other,
        where all the following maven coordinates belong to the dependent module
    -   <dependency>
            <groupId>com.company.product</groupId>
            <artifactId>dependent-module</artifactId>
            <version>1.0</version>
        </dependency>

    Maven Scopes
    -   Maven allows us the visibility of the project dependencies using the scope element
    -   which scope we use will impact on when those dependencies are available at maven lifecycle
    -   There are 6 scopes
        -   compile
                -   In compile scope the dependencies are available at compile, test, run time.
                -   It is also the default scope
        -   runtime
                -   They are not available in compile time but are present in test and run time.
        -   provided
                -   In provided scope the dependencies also are available at compile, test, run time.
                -   But, they don't need to get deployed like the servlet-api
                    -   We need the servelet api while running the application in local
                    -   But, when it is deployed then it is not required since the application servers already have them
        -   test
                -   In test scope dependencies are available during compiling the tests and running them. Eg junit
        -   system
                -   Not used that much in projects.
                -   When there is an external jar dependency that is not present in maven repo, but in system path
                    then we can use this scope.
        -   import
                -   This dependency is used on pom based projects and not on jar or war based projects.

    Dependency Mangement
        -   Sometimes what happens is that, different modules use differnt versions of same type of dependency.
            It becomes hectic to manage differnt versions
        -   So to avoid this dependency management tag is used like below, and is added in the parent pom
        -   <dependencyManagement>
                <dependencies>
                    <dependency>
                        <groupId>junit</groupId>
                        <artifactId>junit</artifactId>
                        <version>4.4</version>
                    </dependency>
                </dependencies>
            </dependencyManagement>

            <dependencies>
                <dependency>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>

        -   In this we define the version of the dependency we want to use.
        -   Then remove the version in the dependencies version defined separately in the parent pom, like above.
        -   And in the child modules we can omit the version tag, and then the child modules will use the
            same version of dependency.
        -   But, if the version is not removed from the child module then, the child module will override the
            dependency version that is declared in the parent pom.

    Plugin Management
        -   Different modules may use the different version and different configuration of same plugins.
        -   To enable that all the child modules use the same version and same configuration of plugin
            then in that case plugin management tag is used.
        -   Go to parent pom and use pluginmanagement tag like this.
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-compiler-plugin</artifactId>
                            <version>3.2</version>
                            <configuration>
                                <source>11</source>
                                <target>11</target>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        -   pluginManagment tag comes under build tag
        -   In this we define the version and configuration of plugin that we want to use.
        -   Now remove the versions and configurations from the plugins of the child modules.















