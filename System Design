System Design

Types of Requirements
	-	Features of the System
		-	Functional Requirements
	-	Quality Attributes
		-	Non-Functional Requirements
	-	System Constraints
		-	Limitations and boundaries.

(1)Functional Requirements
	-	More powerful way of gathering requirements:
		-	(1)use cases
			-	Situation/Scenario in which our system is used.
		-	(2)user flows
			-	A Step by Step/ graphical representation of each use case.
	-	Requirement Gathering Steps
		-	(1)Identify all the actors/users in the system.
		-	(2)Capture and describe all possible use-cases/scenarios.
		-	(3)User flow - Expand each use case through flow of events.

		Eg: HitchHiking Service - Actors
			-	Allow people to join drivers on a route, who are willing to take passengers for a fee.
				-	Actors
					-	Driver
					-	Rider
			HitchHiking Service - Rider Use Cases
				-	Rider first time registration
				-	Driver registration
				-	Rider login
				-	Driver login
				-	Successful match and ride
				-	UnSuccessful ride
	-	For Use cases we can use Sequence Diagrams
		-	Sequence Diagram - Diagram that represents interactions between actors and objects.
			-	It can be done by using UML(Unified Modeling Language)

(2)Non-Functionl Requirements
	-	Quality attributes are non-functional requirements
	-	The describe
		-	The qualities of functional requirements.
		-	The overall properties of the system.
	-	Provides a QUALITY MEASURE on how well a system performs on a PARTICULAR DIMENSION.
	-	Quality Attribute Example:
		-	Response time within 100 milliseconds
		-	The online store must be available at least 99.9% of the time.
		-	Development team can deploy a new version of the online store atleast twice a week.

	-	Quality Attributes considerations
		-	Quality attributes needs to be:
			-	(1) Measurable and Testable
				-	If we cannot prove that our system satisfied the required quality attributes we don't know if our system performs WELL or POORLY.
					-	Eg: When the user clicks a button then resoponse should be sent QUICKLY. here quickly is unmeasurable.
			-	(2)TradeOffs
				-	No single software architecture can provide all the quality attributes.
				-	Certain quality attributes contradict each other. For eg: login with 1 ms, but more security means more response time.
				-	Some quality attributes are very hard/impossible to achieve.
				-	Right tradeoff should be taken.
			-	(3)Feasibility
				-	System should meet requirements that the client is asking for.
				-	Client may ask something which is either
					-	Technically impossible
					-	Prohibitevely expensive to implement
				-	Eg: Unrealistic low latency
						-	Server is in asia, while client is in america. Where minimum latency is 100ms and clients ask for less than 100ms.

(3)System Constraints
	-	A system constraint is essentially a decision that was already either fully or partially made for us, restricting our degress of freedom.
	-	And it is not always a bad thing.
	-	It makes the jobs easy for designing a system.
	-	System constraints are referred as pillars for software architecture because
		-	They provide us the solid starting point.
		-	The rest of the system needs to be designed around them.
Types of Constraints
	-	(1)Technical Constraints
		-	Eg: using in house servers, rather than using cloud services. Then our architecture will not have cloud technologies.
		-	It may seem they belong to implementation and not to software architecture
		-	In practice, they affect the decisions we make in the design phase and put restrictions on our architecture
	-	(2)Business Constraints
		-	Eg: Very limited budget or stict deadline will have different architecture than unlimited budget and unlimited time.
		-	There are architecture patterns based on suitablity between startups and bigger organizations.
	-	(3)Regulatory/Legal constraints
		-	Eg: In some countries, there is regulation on accessing patient's data.

	-	System Constraints Considerations
		-	(1)Not taking any constraints lightly
			-	There should be distinction between
				-	Real Constraints - Here we can't negotiate
				-	Self-imposed constraints - We can have negotiation with the client.
		-	(2)Use loosly coupled architecture
			-	System should not be tightly coupled to a particular technology.
			-	Usage of different technology/service in future should need minimal changes.


List of Quality Attributes
	-	Performance
	-	Scalability
	-	Availability

Performance Definitions
	-	(1)Response Time
		-	Time between client sending a request and receiving a response.
		-	Response time = processing time + Waiting Time
	-	(2)ThroughPut
		-	Amount of work performed by our system per unit of time.
			-	Measured in task/second.
		-	Amount of data performed by our system per unit of time.
			-	Measured in bits/second, Bytes/second, MBytes/second.

	-	1. Measuring Response time Correctly
		-	While measuring response time, waiting time should also be considered, as one request may process fast but more time is spend in waiting. 
	-	2. Response time Distribution
		-	Creating a histogram for number of requests and their response times.
		-	Percentile Definition
			-	The xth Percentile is the value below which x% of the values can be found.
			-	For eg: 20th percentile is having 10 milliseconds response time. Meaning 20 percents of the requests were having response time less than 10 milliseconds.
		-	Tail Latency
			-	The small percentage of response times from a system, that take the longest in comparison to the rest of the values.
			-	Shorter tail is better
		-	Response time Goals Examples
			-	Eg:
				-	30ms at 95th percentile of response time. Meaning 95% of requests should have response time atmost 30ms. Rest 5% can have more response time.
	-	3. Performance Degradation
		-	A point in time where response time increases and throughput decreases significantly.
		-	High-Resource Utilization
			-	High CPU utilization
			-	High memory consumption